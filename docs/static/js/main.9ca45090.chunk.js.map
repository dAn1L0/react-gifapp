{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","titleNaN","title","id","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","length","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAgBlD,OACE,sBAAMC,SATa,SAAEC,GACrBA,EAAEC,iBACGJ,EAAWK,SACdP,GAAe,SAAAQ,GAAI,OAAMN,GAAN,mBAAqBM,OACxCL,EAAc,MAKhB,SACE,uBACEM,KAAK,OACLC,MAAQR,EACRS,SAjBmB,SAAEN,GACzBF,EAAeE,EAAEO,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAEtBC,EAAUD,EAAIE,MAAMnB,OAASiB,EAAIE,MAAQ,MAE/C,MAAO,CACLC,GAAIH,EAAIG,GACRD,MAAOD,EACPT,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAbjB,kBAiBdM,GAjBc,4CAAH,sDCCPQ,EAAc,SAAC,GAAsB,IAAnBJ,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGpC,OACE,sBAAKe,UAAU,OAAf,UACE,qBAAKC,IAAMhB,EAAMiB,IAAMP,EAAQK,UAAU,wCACzC,mBAAGA,UAAU,wCAAb,SAAwDL,QCJjDQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEhBb,mBAAS,CACjCoB,KAAM,GACNc,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAwB1C,OAjBAC,qBAAW,WAETzB,EAASC,GACNyB,MAAM,SAAAC,GAELC,YAAY,WAGVJ,EAAS,CACPhB,KAAMmB,EACNL,SAAS,MAGV,UAEN,CAAErB,IAEEsB,EDrB0BM,CAAc5B,GAAlCc,EAF0B,EAE/BP,KAAac,EAFkB,EAElBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,0CAAd,SAA0DjB,IACxDqB,GAAW,2CACXP,EAAOe,OAAS,GAAK,uBACvB,qBAAKZ,UAAU,YAAf,SAEIH,EAAOL,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIG,aEXXiB,EAAe,WAAM,MAGI3C,mBAAS,CAAC,KAHd,mBAGzB4C,EAHyB,KAGb7C,EAHa,KAUhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEM6C,EAAWtB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCrBtBgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9ca45090.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputValue = ( e ) => {\n    setInputValue( e.target.value );\n  }\n\n  const handleSubmit = ( e ) => {\n    e.preventDefault();\n    if ( inputValue.trim() ) {\n      setCategories( cats => [ inputValue, ...cats] );\n      setInputValue('')  ;\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputValue }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n","\nexport const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=AmwFpmSNaAeGzQIlBYcgrdWuxM0TGwl6`;\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n\n    const titleNaN= img.title.trim() ? img.title : 'NaN';\n    \n    return {\n      id: img.id,\n      title: titleNaN,\n      url: img.images?.downsized_medium.url,\n    };  \n  });\n  \n  return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n\n  return (\n    <div className=\"card\">\n      <img src={ url } alt={ title } className=\"animate__animated animate__backInUp\"/>\n      <p className=\"animate__animated animate__backInDown\" >{ title }</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data:images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__bounceInLeft\">{ category }</h3>\n      { loading && <p>Loading...</p> }\n      { images.length > 0 && <hr/> }\n      <div className=\"card-grid\">\n        {\n          images.map( img => (\n            <GifGridItem\n              key={ img.id }\n              { ...img }\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect( () => {\n\n    getGifs( category )\n      .then( imgs => {\n\n        setTimeout( () => {\n\n          // console.log(imgs);\n          setState({\n            data: imgs,\n            loading: false\n          });\n\n        }, 1000 )\n      })\n  }, [ category ])\n\n  return state;\n  \n}\n","import React,{ useState } from 'react';\n// import React from 'react';\n\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  // const categories = ['One Punch','Samurai X','Dragon Ball'];\n  const [categories, setCategories] = useState(['']);\n\n  // const handleAdd = (e) => {\n  //   // setCategories([...categories,'Simpsons']);\n  //   setCategories( cats => [...cats,'Simpsons'] );\n  // };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr/>\n\n\n      <ol>\n          {\n            categories.map( category => (\n              <GifGrid   \n                key={ category }\n                category={ category }\n              />\n            ))\n          }\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}